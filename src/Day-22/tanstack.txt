TanStack React Query (pehle isko React Query kehte the) 

ek super powerful library hai React apps ke liye, jo data fetching, caching,
 synchronization, aur server-state management ko ekdam smooth aur easy bana deti hai. 
 Iska main kaam hai server se data fetch karna, usko cache mein store karna, aur jab need ho to update karna,
  taaki UI fast aur responsive rahe. Chalo, ek-ek karke iske saare details hinglish mein cover karte hain, 
  step-by-step, sab kuch samajh aaye!


1. TanStack React Query Kya Hai?

    Ye ek data-fetching aur state management library hai jo React ke saath kaam karti hai.

    Iska focus server-state pe hota hai, matlab jo data server se aata hai (like API calls), usko handle karna.
    Local state (jaise form inputs) ke liye nahi bana, uske liye tum React
     ke useState ya Redux wagaira use kar sakte ho.

    Ye hooks-based hai, yani isme tum useQuery, useMutation jaise hooks use karte ho.
    Ye agnostic hai fetching ke liye, matlab tum Axios, Fetch API, ya koi aur tool use kar sakte ho.

Why Use It?

    Data fetching ko simplify karta hai.
    Automatic caching deta hai, taaki baar-baar API calls na karne pade.
    Loading, error, aur success states ko handle karna asaan ho jata hai.
    Refetching, polling, aur background sync jaisa advanced kaam bhi built-in hai.

2. Installation Kaise Kare?

Pehle project mein install karna padega. Terminal mein ye command run karo:
bash
npm install @tanstack/react-query

Ya yarn use karte ho to:
bash
yarn add @tanstack/react-query

Setup Karo:
App ke root mein QueryClientProvider lagao, 
jo QueryClient ka instance provide karta hai. 
Ye har query ke liye context set karta hai.
jsx
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import App from './App';


// QueryClient banao
const queryClient = new QueryClient();

function Main() {
  return (
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  );
}

export default Main;

Ab tumhare app mein TanStack Query ka setup complete hai!
3. Data Fetching with useQuery

useQuery hook sabse zyaada use hota hai data fetch karne ke liye.
 Ye ek unique key ke saath kaam karta hai aur ek function leta hai jo data fetch karta hai.

Basic Example:
jsx
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

function MyComponent() {
  // useQuery hook
  const { data, isLoading, isError, error } = useQuery({
    queryKey: ['posts'], // Unique key for this query
    queryFn: async () => {
      const response = await axios.get('https://jsonplaceholder.typicode.com/posts');
      return response.data;
    },
  });

  // Loading state
  if (isLoading) return <div>Loading bhai...</div>;

  // Error state
  if (isError) return <div>Error aaya: {error.message}</div>;

  // Success state
  return (
    <div>
      <h1>Posts</h1>
      {data.map(post => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  );
}

Kya Hua Yaha?

    queryKey: ['posts'] - Ye query ko identify karta hai. Agar same key ke saath dobara call hoti hai, 
    to cached data use hota hai.
    queryFn - Ye function data fetch karta hai (axios ya fetch se).
    useQuery returns object mein:
        data: Fetched data.
        isLoading: True jab data fetch ho raha ho.
        isError: True jab error aaye.
        error: Error ka message ya object.
        Aur bhi bohot saare properties hain (neeche batayenge).

4. Mutations with useMutation

Jab tumhe server pe data update, create, ya delete karna ho (POST, PUT, DELETE requests), 
tab useMutation use hota hai.

Example:
jsx
import { useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';

function AddPost() {
  const queryClient = useQueryClient(); // Cache ko update karne ke liye

  const mutation = useMutation({
    mutationFn: async (newPost) => {
      const response = await axios.post('https://jsonplaceholder.typicode.com/posts', newPost);
      return response.data;
    },
    onSuccess: () => {
      // Query invalidate karo taaki cache refresh ho
      queryClient.invalidateQueries(['posts']);
    },
  });

  const handleSubmit = () => {
    mutation.mutate({ title: 'New Post', body: 'This is a new post', userId: 1 });
  };

  return (
    <div>
      <button onClick={handleSubmit} disabled={mutation.isLoading}>
        {mutation.isLoading ? 'Adding...' : 'Add Post'}
      </button>
      {mutation.isError && <div>Error: {mutation.error.message}</div>}
      {mutation.isSuccess && <div>Post added!</div>}
    </div>
  );
}

Kya Hai Ye?

    mutationFn: Ye function server pe request bhejta hai.
    mutate: Ye function call karta hai mutation ko.
    onSuccess: Jab mutation successful hota hai,
     tab cache ko invalidate kar sakte ho taaki related queries refetch ho.
    States: isLoading, isError, isSuccess wagaira bhi milte hain.

5. Important Features aur Concepts

Ab thodi deep dive karte hain, kyuki TanStack Query ke features hi isko itna powerful banate hain.
a. Caching

    Har query ka data cache mein store hota hai, identified by queryKey.
    Agar same queryKey ke saath dobara query chalao, to cached data turant return hota hai,
     aur background mein fresh data fetch hota hai (stale-while-revalidate).

    Cache time control kar sakte ho:
    jsx

    useQuery({
      queryKey: ['posts'],
      queryFn: fetchPosts,
      cacheTime: 5 * 60 * 1000, // 5 minutes
    });

b. Refetching

    By default, query refetch hoti hai jab:
        Component re-mount hota hai.
        Window focus hota hai (user tab switch karke wapas aaye).
        Network reconnect hota hai.
    Refetch control kar sakte ho:
    jsx

    useQuery({
      queryKey: ['posts'],
      queryFn: fetchPosts,
      refetchOnWindowFocus: false, // Disable refetch on focus
    });

c. Polling

    Agar tumhe regular interval pe data fetch karna hai (like live updates), use refetchInterval:
    jsx

    useQuery({
      queryKey: ['posts'],
      queryFn: fetchPosts,
      refetchInterval: 1000, // Har 1 second mein refetch
    });

d. Stale Time

    staleTime decide karta hai ki kitni der tak cached data "fresh" mana jaye.
    Default staleTime 0 hai, yani data fetch hote hi stale ho jata hai aur background mein refetch hota hai.
    jsx

    useQuery({
      queryKey: ['posts'],
      queryFn: fetchPosts,
      staleTime: 5 * 60 * 1000, // 5 minutes tak fresh
    });

e. Error Handling

    Errors automatically handle hote hain, aur error property se access kar sakte ho.
    Retry bhi built-in hai:
    jsx

    useQuery({
      queryKey: ['posts'],
      queryFn: fetchPosts,
      retry: 3, // 3 baar retry karega agar fail ho
    });

f. Dependent Queries

    Agar ek query ka data doosre query pe depend karta hai:
    jsx

    const { data: user } = useQuery({
      queryKey: ['user', userId],
      queryFn: fetchUser,
    });

    const { data: posts } = useQuery({
      queryKey: ['posts', userId],
      queryFn: () => fetchPosts(userId),
      enabled: !!user, // Ye query tabhi chalegi jab user data ho
    });

g. Optimistic Updates

    Mutation ke time UI ko turant update karo, aur agar server se error aaye to rollback karo.
    jsx

    mutation({
      mutationFn: updatePost,
      onMutate: async (newPost) => {
        // Cache ko manually update karo
        await queryClient.cancelQueries(['posts']);
        const previousPosts = queryClient.getQueryData(['posts']);
        queryClient.setQueryData(['posts'], (old) => [...old, newPost]);
        return { previousPosts }; // Rollback ke liye
      },
      onError: (err, newPost, context) => {
        // Error aaye to rollback
        queryClient.setQueryData(['posts'], context.previousPosts);
      },
      onSettled: () => {
        queryClient.invalidateQueries(['posts']);
      },
    });

h. Pagination

    Paginated data ke liye useInfiniteQuery use karo:
    jsx

    import { useInfiniteQuery } from '@tanstack/react-query';

    function InfinitePosts() {
      const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useInfiniteQuery({
        queryKey: ['posts'],
        queryFn: async ({ pageParam = 1 }) => {
          const response = await axios.get(`https://api.example.com/posts?page=${pageParam}`);
          return response.data;
        },
        getNextPageParam: (lastPage, pages) => lastPage.nextPage || undefined,
      });

      return (
        <div>
          {data?.pages.map(page =>
            page.posts.map(post => <div key={post.id}>{post.title}</div>)
          )}
          <button onClick={() => fetchNextPage()} disabled={!hasNextPage || isFetchingNextPage}>
            {isFetchingNextPage ? 'Loading...' : 'Load More'}
          </button>
        </div>
      );
    }

6. DevTools

TanStack Query ke saath ek DevTools component milta hai, jo debugging ke liye awesome hai. Cache, queries, aur mutations ko live dekh sakte ho.

Setup:
jsx
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Main />
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}
7. Best Practices

    Query Keys: Hamesha meaningful aur unique keys use karo.
     Nested keys ke liye arrays use karo,
     like ['posts', postId].
    Error Handling: Custom error messages ke liye onError callback use karo.
    Keep It Simple: Zyaada complex logic queryFn mein mat daalo,
     uske liye separate service layer banao.
    Use TypeScript: Agar TypeScript use karte ho, to types define karo taaki errors kam ho.
    Invalidate Smartly: Cache invalidate karte waqt specific queries target karo, taaki unnecessary refetches na ho.

8. Common Use Cases

    APIs se Data Fetching: Posts, users, ya koi bhi data fetch karna.
    Form Submissions: useMutation se forms submit karna.
    Infinite Scroll: useInfiniteQuery se paginated ya infinite scroll lists banana.
    Real-time Updates: Polling ya WebSocket ke saath combine karke live data dikhana.
    Optimistic UI: UI ko fast dikhane ke liye optimistic updates.

9. Limitations

    Local State ke liye Nahi: Form state ya UI state ke liye nahi bana, uske liye useState ya Redux use karo.
    Learning Curve: Shuru mein thoda complex lag sakta hai, especially caching aur refetching ke concepts.
    Dependency: React pe dependent hai, dusre frameworks ke saath nahi chalega.

10. Resources

    Official Docs: https://tanstack.com/query
    GitHub: https://github.com/TanStack/query
    YouTube Tutorials: “TanStack Query” search karo, bohot saare videos milenge.
    X Posts: Real-time tips ke liye X pe #TanStackQuery ya #ReactQuery hashtag check karo.

Bhai, ye tha TanStack React Query ka full breakdown! 

Agar koi specific part pe aur detail chahiye ya koi example banane bolna,
 to bata. Ab tu isko apne project mein laga ke dekhega to maza aayega! 😎 Koi doubt ho to bolna!